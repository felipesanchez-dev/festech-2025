---
import { MOBILE_MENU_CONTENT_ID } from '@/shared/constants/mobile-menu'
import HamburgerButton from '../components/ui/HamburgerButton.astro'
import LogoIcon from '@/icons/festch.webp'
import Menu from '../components/features/Menu.astro'
import { Image } from 'astro:assets'

const sections = [
  { name: 'INICIO', href: '/' },
  { name: 'AGENDA DEL EVENTO', href: '/' },
  { name: 'PARTICIPANTES', href: '/' },
  { name: 'FESTECH 2024', href: '/' },
]
---

<header
  class="py-6 z-[999] fixed top-0 left-0 right-0 bg-black/70 backdrop-blur-md border-b border-white/10 transition-all duration-300 w-full"
>
  <div class="flex gap-4 justify-between items-center max-w-full mx-auto px-4">
    <a href="/" class="flex gap-x-3 items-center">
      <Image src={LogoIcon} alt="Festech Logo" class="md:size-16 size-10" />
      <div class="max-md:-mb-1">
        <h3
          class="font-clash font-semibold max-md:h-4 md:text-2xl text-lg flex flex-row items-center gap-x-2 text-white"
        >
          FESTECH
          <span
            class="rounded-full bg-javascript text-black font-semibold md:text-lg text-xs md:px-3 md:py-1 px-2 py-0.5 !leading-none flex justify-center items-center"
            >2025</span
          >
        </h3>
        <span class="uppercase font-light opacity-80 text-sm text-white max-md:text-xs"
          >11 DE SEPTIEMBRE 2025</span
        >
      </div>
    </a>
    <div class="text-white">
      <Menu />
    </div>
    <div class="hidden lg:flex items-center gap-4">
      <a
        class="group relative inline-flex items-center justify-center gap-3 px-3 py-2 bg-gradient-to-r from-[#FFFE65] to-[#F7DF1F] text-black font-bold text-lg rounded-full hover:scale-105 transition-all duration-300 ease-in-out hover:shadow-lg hover:shadow-yellow-400/25 w-fit mx-auto"
        href="https://forms.gle/aTY58rGQG8mJMViR9"
        target="_blank"
        rel="noopener noreferrer"
      >
        <span class="relative z-10">REGÍSTRATE AQUÍ</span>
        <div
          class="font-bold absolute inset-0 bg-gradient-to-r from-[#F7DF1F] to-[#FFFE65] opacity-0 group-hover:opacity-100 rounded-full transition-opacity duration-300"
        >
        </div>
      </a>
    </div>
    <HamburgerButton class:list="block lg:hidden" id="menuButton" />
    <div
      class="fixed inset-0 z-[888] flex w-full h-[100dvh] flex-col items-center lg:hidden backdrop-blur-lg bg-black/85 overflow-hidden"
      id={MOBILE_MENU_CONTENT_ID}
    >
      <aside class="flex min-h-16 w-full items-center justify-end px-6 pt-6">
        <HamburgerButton id="innerMenuButton" />
      </aside>
      <nav class="navContent flex w-full h-full flex-col items-start justify-end px-6 gap-5 mb-8">
        {
          sections.map(({ name, href }, key) => (
            <>
              <a
                href={href}
                class:list={['text-white font-clash text-5xl font-medium']}
                id={`navmob-link-${key}`}
              >
                {name.charAt(0).toUpperCase() + name.slice(1).toLowerCase()}
              </a>
            </>
          ))
        }
      </nav>
    </div>
  </div>
</header>
<style>
  #menuMobileContent {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s;
    scrollbar-gutter: stable;
  }

  #menuMobileContent.open {
    opacity: 1;
    pointer-events: all;
  }

  @media (prefers-reduced-motion) {
    #menuMobileContent {
      transition: opacity 0s;
    }
    header {
      transition: none;
    }
  }
</style>
<script>
  function toggleMenu(
    nav: HTMLElement | null,
    menuMobileContent: HTMLElement | null,
    innerMenuButton: HTMLElement | null
  ) {
    menuMobileContent?.classList.toggle('open')
    nav?.classList.toggle('open')
    innerMenuButton?.classList.toggle('open')
    document.body.classList.toggle('overflow-hidden')
    document.body.classList.toggle('lg:overflow-auto')
  }

  function headerBgTransition() {
    const header = document.querySelector('header') as HTMLElement
    if (window.scrollY > 10) {
      header.classList.add('bg-black/80', 'backdrop-blur-lg')
      header.classList.remove('bg-black/70', 'backdrop-blur-md')
    } else {
      header.classList.add('bg-black/70', 'backdrop-blur-md')
      header.classList.remove('bg-black/80', 'backdrop-blur-lg')
    }
  }

  window.addEventListener('scroll', () => {
    headerBgTransition()
  })

  window.onload = () => {
    headerBgTransition()

    const nav = document.querySelector('nav') as HTMLElement
    const menuButton = document.querySelector('#menuButton') as HTMLElement
    const innerMenuButton = document.querySelector('#innerMenuButton') as HTMLElement
    const menuMobileContext = document.getElementById('menuMobileContent') as HTMLElement

    const linksMobile: HTMLAnchorElement[] = Array.from(
      document.querySelectorAll('a[id^="navmob-link-"]')
    )

    function handleLinkClick(isMobile: boolean) {
      if (isMobile) {
        toggleMenu(nav, menuMobileContext, innerMenuButton)
        menuButton.classList.toggle('hidden')
      }
    }

    linksMobile.forEach((link) => {
      link.addEventListener('click', () => handleLinkClick(true))
    })

    menuButton?.addEventListener('click', () => {
      menuButton?.classList.toggle('hidden')
      toggleMenu(nav, menuMobileContext, innerMenuButton)
    })
    innerMenuButton?.addEventListener('click', () => {
      menuButton?.classList.toggle('hidden')
      toggleMenu(nav, menuMobileContext, innerMenuButton)
    })

    if (menuMobileContext?.classList.contains('open')) {
      toggleMenu(nav, menuMobileContext, innerMenuButton)
    }

    function updateNavbarBackground() {
      const header = document.querySelector('header')
      if (!header) return

      const scrollTop = window.pageYOffset || document.documentElement.scrollTop

      if (scrollTop > 50) {
        header.classList.add('scrolled')
      } else {
        header.classList.remove('scrolled')
      }
    }

    window.addEventListener('scroll', updateNavbarBackground)
    updateNavbarBackground()
  }
</script>

<style>
  header {
    transition: all 0.3s ease-in-out;
  }

  header.scrolled {
    background-color: rgba(0, 0, 0, 0.85);
    backdrop-filter: blur(24px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
  }
</style>
